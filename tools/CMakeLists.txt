# Include Eigen
IF (DEFINED ENV{EIGEN_INC})
    SET(EIGEN_BASE $ENV{EIGEN_INC}/eigen3)
ELSE (DEFINED ENV{EIGEN_INC})
    SET(EIGEN_BASE "/opt/local/include/eigen3")
ENDIF (DEFINED ENV{EIGEN_INC})
INCLUDE_DIRECTORIES("/opt/local/include")
INCLUDE_DIRECTORIES(${EIGEN_BASE})
INCLUDE_DIRECTORIES(${EIGEN_BASE}/unsupported)
ADD_DEFINITIONS(-DEIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET)

# Include headers
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/tools)

# Add swig wrapper for the library
FIND_PACKAGE(SWIG REQUIRED)
#INCLUDE(${SWIG_USE_FILE})
INCLUDE(UseSWIG)

# Find python
IF ((NOT DEFINED ENV{PYTHON_INCLUDE_PATH}) OR (NOT DEFINED ENV{PYTHON_LIBRARIES}))
    FIND_PACKAGE(PythonLibs)
ELSE ((NOT DEFINED ENV{PYTHON_INCLUDE_PATH}) OR (NOT DEFINED ENV{PYTHON_LIBRARIES}))
    SET(PYTHON_INCLUDE_PATH $ENV{PYTHON_INCLUDE_PATH})
    SET(PYTHON_LIBRARIES $ENV{PYTHON_LIBRARIES})
ENDIF ((NOT DEFINED ENV{PYTHON_INCLUDE_PATH}) OR (NOT DEFINED ENV{PYTHON_LIBRARIES}))
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})

# Find numpy
FIND_PACKAGE("NumPy")
INCLUDE_DIRECTORIES(${NUMPY_INCLUDE_DIRS})

# Add eigen wrapper
INCLUDE_DIRECTORIES(${EIGEN_WRAPPER_PATH})

#ADD_SUBDIRECTORY(selfintersect)
#ADD_SUBDIRECTORY(windingnumber)
ADD_SUBDIRECTORY(MeshUtils)
#ADD_SUBDIRECTORY(tetgen)
#ADD_SUBDIRECTORY(CGAL)
ADD_SUBDIRECTORY(Assembler)
ADD_SUBDIRECTORY(EigenUtils)
ADD_SUBDIRECTORY(OpenCL)
ADD_SUBDIRECTORY(SparseSolver)
ADD_SUBDIRECTORY(Envelope)

# Bundle all tools together
ADD_CUSTOM_TARGET(tools DEPENDS
    #windingnumber
    #selfintersect
    MeshUtils
    #tetgen
    #cgal
    assembler
    opencl_wrapper
    EigenUtils
    envelope
    SparseSolver)
