# General lib locations
LINK_DIRECTORIES(/opt/local/lib)

# Find tetgen
IF (DEFINED ENV{TETGEN_PATH})
    LINK_DIRECTORIES($ENV{TETGEN_PATH})
    INCLUDE_DIRECTORIES($ENV{TETGEN_PATH})
ENDIF (DEFINED ENV{TETGEN_PATH})
ADD_DEFINITIONS(-DTETLIBRARY)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
SET(SRC_FILES tetgen_wrapper.cpp)
SET(INC_FILES tetgen_wrapper.h)
SET(MAIN_FILE main.cpp)

ADD_LIBRARY(tetgen_wrapper ${SRC_FILES} ${INC_FILES})
TARGET_LINK_LIBRARIES(tetgen_wrapper Mesh tet)

ADD_EXECUTABLE(tetgen_test ${MAIN_FILE})
TARGET_LINK_LIBRARIES(tetgen_test tetgen_wrapper)

set(SWG_FILES PyTetgen.i)

# Generate wrapper for python
SET_SOURCE_FILES_PROPERTIES(${SWG_FILES} PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(${SWG_FILES} PROPERTIES CMAKE_SWIG_FLAGS "-includeall")
SWIG_ADD_MODULE(PyTetgen python ${SWG_FILES} ${INC_FILES})
SWIG_LINK_LIBRARIES(PyTetgen ${PYTHON_LIBRARIES} Mesh tetgen_wrapper)

# Boudle exe, lib, swig wrapper into a single target.
# To build all 3, one can just "make selfintersect"
# Note the swig target is the autogenerated _PySelfintersect
# instead of PySelfintersect.
ADD_CUSTOM_TARGET(tetgen DEPENDS tetgen_wrapper _PyTetgen tetgen_test)
