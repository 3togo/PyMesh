These 2 small programs compile to either a standalone executable or a matlab
mex function. 

selfintersect  this detects intersecting pairs of triangles in a given triangle
               mesh in 3D. 

collapse_small_triangles  given a triangle mesh, this collapse triangles whose
                          area is below a given tolerance

= Dependencies =
  stdlib
  CGAL
    libboost
    libgmp
    libmpfr
  igl_lib
    Eigen
    libiglmatlab extra (optional)
  MATLAB (optional)

= Standalone Executable =
  Assuming you install CGAL (e.g. with macports) and compile igl_lib then
  building the standalone executable should be straightforward. Compiling with
  CGAL is slow. But executing with CGAL is robust in fast, so be patient.  It's
  worth it.

  = Compile =
  Build on Mac OS X (and probably also Linux) with:
  
  make clean
  make

  This make file uses precompile headers which is benefitial during repeated
  recompilation.

  = Run =
  Run on Mac OS X (and probably also Linux) with:

  ./selfintersect example/holy-cow.off

  This produces 2 files:
  example/holy-cow-IF.dmat  List of intersecting pairs of faces. See
			    description of .dmat ascii file format in
			    igl_lib/file-formats/dmat.html

  example/holy-cow-selfintersect.off  New mesh with meshed self-intersections
  
  Similarly if you run:

  ./collapse_small_triangles example/holy-cow.off

  This produces 1f file

= Mex Function =
  Building mex functions that depend on non-standard external libraries is not
  fun. I have tested compilation on different Macs with different versions of
  MATLAB. Compiling this anywhere should be possible, but I've noticed that the
  boost library dynamically linked from the matlab IDE sometimes fights with
  the boost library needed by CGAL. This causes bogus runtime errors and
  assertions.

  = Prepare =
  So as not to confuse matlab, let's first clean up any previous builds:

  make clean

  = Compile = 
  I've noticed that the default gcc/g++ can be a lot of trouble with the mex,
  cgal, boost constellation. On Mac OS X I recommend using gcc-4.7. I have had
  bad experiences with gcc-4.3, resulting in bogus runtime errors and
  assertions.

    = mexopts.sh =
    Setting up your mexopts properly on a Mac depends on which version of XCode
    you have installed. 

    Open up mexopts.sh. First you need to point the SDKROOT variable to your
    sdk. This is usually either something like:

    SDKROOT='/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/'

    or 

    SDKROOT='/Developer/SDKs/MacOSX10.7.sdk'

    Next, you need to remove the -no-cpp-precomp flag and add the
    -frounding-math flag to your CFLAGS and CXXFLAGS

    I also found it best to change CC and CXX to point to a g++-4.7 (or
    g++-mp-4.7)

  To mex on a mac, open up matlab and issue:

  % Alec's Macbook Air, Intel Core i7, 10.7.5, MATLAB 2012a, XCode 4.3.3, Boost
  % 1.52.0_1, CGAL 4.1, g++-mp-4.7
  mex -v -o collapse_small_triangles -DMEX src/parse_rhs.cpp ... 
    collapse_small_triangles_main.cpp src/collapse_small_triangles.cpp  ...
    -Isrc -I/opt/local/include/eigen3 -I/usr/local/igl/igl_lib/include ...
    -L/usr/local/igl/igl_lib/lib -ligl -liglmatlab;
  mex -v -o selfintersect -DMEX src/parse_rhs.cpp selfintersect_main.cpp ...
    src/selfintersect.cpp src/SelfIntersectMesh.cpp -Isrc ...
    -I/opt/local/include/ -I/opt/local/include/eigen3 ...
    -I/usr/local/igl/igl_lib/include -L/usr/local/igl/igl_lib/lib -ligl ...
    -liglmatlab -L/opt/local/lib/ -lCGAL -lCGAL_Core -lgmp -lmpfr ...
    -lboost_thread-mt -lboost_system-mt;


  If you have a non-standard installation of eigen3 and igl_lib, you will need
  to be sure that in the mex commands above you change:

  /usr/local/igl/igl_lib ---> path to igl_lib directory 
  /opt/local/include/eigen3---> path to eigen3 directory 
  /opt/local/include/ ---> path to CGAL/Boost/gmp/mpfr include directory 
  /opt/local/lib/ ---> path to CGAL/Boost/gmp/mpfr lib directory 

    = libboost = 
    It seems MATLAB 2012b's libboost does not play nicely with macports
    libboost-mt. Should compile with matlab's libboost directly: -lboost_*
    rather than -lboost_*-mt

    % Alec's iMac, Intel Core i7, 10.7.5, MATLAB 2012b, XCode 4.2, Boost
    % 1.52.0_1, CGAL 4.1, g++-mp-4.7

  = Run =
  You can then run these with the following examples:

  V1 = [0 0 0;1 0 0;0 1 0;0.5 0.5 0.5;0 0 -0.5;1 1 -0.5];
  F1 = [1 2 3;4 5 6];
  [SV,SF] = selfintersect(V1,F1);

  V2 = [0 0 0;1 0 0;0 1 0;0 1.004 0];
  F2 = [1 2 3;3 2 4];
  [CF] = collapse_small_triangles(V,F,1e-3);

= Exact detection only =
If you only want to *detect* selfintersection exactly, without meshing them.
Then you can recompile using the -DINEXACT_CONSTRUCTION flag.

  = Standalone Executable =
  Uncomment the following line in Makefile:

  CXXFLAGS += -DINEXACT_CONSTRUCTION

  Then recompile:

  make clean
  make selfintersect

  = Mex Function =
  Append the following to the mex commands above, and reissue them:

  -DINEXACT_CONSTRUCTION
