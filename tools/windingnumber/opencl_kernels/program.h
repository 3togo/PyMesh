
#pragma once
#include <string>
namespace Kernel {
std::string winding_number("\n__kernel void compute_winding_number(\n        const uint num_vertices,\n        __global const float* vertices,\n        const uint num_faces,\n        __global const int* faces,\n        __global const float* points,\n        __global float* winding_numbers) {\n    const int id = get_global_id(0);\n    float p[3] = {\n        points[id*3 + 0],\n        points[id*3 + 1],\n        points[id*3 + 2]};\n    float total_solid_angle = 0;\n\n    for (size_t i=0; i<num_faces; i++) {\n        size_t v1_idx = faces[i*3 + 0];\n        size_t v2_idx = faces[i*3 + 1];\n        size_t v3_idx = faces[i*3 + 2];\n        float v1[3] = {\n            vertices[v1_idx*3 + 0],\n            vertices[v1_idx*3 + 1],\n            vertices[v1_idx*3 + 2] };\n        float v2[3] = {\n            vertices[v2_idx*3 + 0],\n            vertices[v2_idx*3 + 1],\n            vertices[v2_idx*3 + 2] };\n        float v3[3] = {\n            vertices[v3_idx*3 + 0],\n            vertices[v3_idx*3 + 1],\n            vertices[v3_idx*3 + 2] };\n        float a[3] = {\n            v1[0] - p[0],\n            v1[1] - p[1],\n            v1[2] - p[2]};\n        float b[3] = {\n            v2[0] - p[0],\n            v2[1] - p[1],\n            v2[2] - p[2]};\n        float c[3] = {\n            v3[0] - p[0],\n            v3[1] - p[1],\n            v3[2] - p[2]};\n        float a_norm = sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2]);\n        float b_norm = sqrt(b[0]*b[0] + b[1]*b[1] + b[2]*b[2]);\n        float c_norm = sqrt(c[0]*c[0] + c[1]*c[1] + c[2]*c[2]);\n        float a_dot_b = a[0]*b[0] + a[1]*b[1] + a[2]*b[2];\n        float b_dot_c = b[0]*c[0] + b[1]*c[1] + b[2]*c[2];\n        float c_dot_a = c[0]*a[0] + c[1]*a[1] + c[2]*a[2];\n        float det =\n            a[0]*b[1]*c[2] - a[0]*b[2]*c[1] +\n            a[2]*b[0]*c[1] - a[1]*b[0]*c[2] +\n            a[1]*b[2]*c[0] - a[2]*b[1]*c[0];\n        float denominator =\n            a_norm * b_norm * c_norm +\n            a_dot_b * c_norm +\n            b_dot_c * a_norm +\n            c_dot_a * b_norm;\n        float angle = atan2(det, denominator) * 2;\n        total_solid_angle += angle;\n    }\n    total_solid_angle /= (4 * M_PI_F);\n    winding_numbers[id] = total_solid_angle;\n}\n\n/*\n__kernel void test(__global uint* result) {\n    const size_t id = get_global_id(0);\n    result[id] = id;\n}\n*/\n");


}
