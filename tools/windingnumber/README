This small program compiles to either a standalone executable or mex function. 

winding_number  computes the (generalized) winding numbers of a given set of
                points with respect to a given mesh, using the hierarchical
                evaluation as described in "Robust Inside-Outside Segmentation
                using Generalized Winding Numbers" [Jacobson et al. 2013]

= Dependencies =
  stdlib
  igl_lib
    Eigen
    libiglmatlab extra (optional)
  MATLAB (optional)
  OpenMP (optional)

= Standalone Executable =
Assuming you compile igl_lib then:

  = Compile =
  Build on Mac OS X (and probably also Linux) with:

  make clean
  make

  = Run =
  Run on Mac OS X (and probably also Linux) with:

  ./winding_number example/cat.off example/cat-O.node

  which produces example/cat-O.dmat containing the generalized winding numbers
  for each point in example/cat-O.node with respect to the open triangle mesh
  in example/cat.off

  For details on supported file formats see igl_lib/file-formats/index.html

= Mex Function =
Building a mex function is fairly easy in this case. The only slight
difficulty I've encountered on Mac OS X is enabling openmp (optional).

  = Compile =
  To enable openmp, you'll need to edit your mexopts.sh file so that the
  CXXOPTIMFLAGS and LDOPTIMFLAGS contain the -fopenmp flag.

  I also found it best to change CC and CXX to point to a g++-4.7 (or
  g++-mp-4.7)

  To mex on a mac, open up matlab and issue:

  mex -v -o winding_number -DMEX -largeArrayDims ...
    -I/opt/local/include/eigen3 -I/usr/local/igl/igl_lib/include ...
    -L/usr/local/igl/igl_lib/lib -ligl -liglmatlab winding_number.cpp ...
    mexFunction.cpp AABB.cpp BoundingTree.cpp parse_rhs.cpp ...
    prepare_lhs.cpp tesselate_boundary.cpp exterior_edges.cpp;

  = Run =
  To run, issue

  % input curve
  V = [-sin(linspace(0,1)*pi*1.5)/3+0.5; cos(linspace(0,1)*pi*1.5)/3+0.5]';
  F = [size(V,1):-1:2;size(V,1)-1:-1:1]';
  % List of evaluation points
  [X,Y] = meshgrid(linspace(0,1));
  O = [X(:) Y(:)];

  % Compute winding number
  W = winding_number(V,F,O)/(2*pi);

  % Visualize
  surf(reshape(W,100,100),'EdgeColor','none','FaceColor','interp','FaceLighting','phong');
  view(2);
  colormap(jet(255));
  caxis([-1/2 1]);
  colorbar;
