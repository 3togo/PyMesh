# General lib locations
LINK_DIRECTORIES(/opt/local/lib)

# Setup IGL
IF (DEFINED ENV{LIBIGL_PATH})
    SET(IGL $ENV{LIBIGL_PATH})
ELSE (DEFINED ENV{LIBIGL_PATH})
    SET(IGL "/opt/local/")
ENDIF (DEFINED ENV{LIBIGL_PATH})
INCLUDE_DIRECTORIES(${IGL}/include)
LINK_DIRECTORIES(${IGL}/lib)
ADD_DEFINITIONS(-DIGL_HEADER_ONLY)

# Include Eigen
IF (DEFINED ENV{EIGEN_INC})
    SET(EIGEN_BASE $ENV{EIGEN_INC}/eigen3)
ELSE (DEFINED ENV{EIGEN_INC})
    SET(EIGEN_BASE "/opt/local/include/eigen3")
ENDIF (DEFINED ENV{EIGEN_INC})
INCLUDE_DIRECTORIES("/opt/local/include")
INCLUDE_DIRECTORIES(${EIGEN_BASE})
INCLUDE_DIRECTORIES(${EIGEN_BASE}/Eigen)
INCLUDE_DIRECTORIES(${EIGEN_BASE}/unsupported)
ADD_DEFINITIONS(-DEIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET)

# Find OpenMP
FIND_PACKAGE( OpenMP REQUIRED)
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
else(OPENMP_FOUND)
    MESSAGE("OpenMP not found")
endif()

# Find OpenCL
FIND_PACKAGE(OpenCL REQUIRED)
IF (OPENCL_FOUND)
    INCLUDE_DIRECTORIES(${OPENCL_INCLUDE_DIRS})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
ELSE(OPENCL_FOUND)
    MESSAGE("OpenCL not found")
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
FILE(GLOB SRC_FILES *.cpp *.c)
FILE(GLOB INC_FILES *.h)
SET(MAIN_FILE main.cpp)

ADD_LIBRARY(lib_windingnumber SHARED ${SRC_FILES} ${INC_FILES})
TARGET_LINK_LIBRARIES(lib_windingnumber ${OPENCL_LIBRARIES})
SET_TARGET_PROPERTIES(lib_windingnumber PROPERTIES OUTPUT_NAME "windingnumber")

ADD_EXECUTABLE(exe_windingnumber ${MAIN_FILE})
SET_TARGET_PROPERTIES(exe_windingnumber PROPERTIES OUTPUT_NAME "windingnumber")
TARGET_LINK_LIBRARIES(exe_windingnumber lib_windingnumber)

set(SWG_FILES PyWindingNumber.i)

# Generate wrapper for python
SET_SOURCE_FILES_PROPERTIES(${SWG_FILES} PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(${SWG_FILES} PROPERTIES CMAKE_SWIG_FLAGS "-includeall")
SWIG_ADD_MODULE(PyWindingNumber python ${SWG_FILES} ${INC_FILES})
SWIG_LINK_LIBRARIES(PyWindingNumber ${PYTHON_LIBRARIES} lib_windingnumber)

# Boudle exe, lib, swig wrapper into a single target.
# To build all 3, one can just "make selfintersect"
# Note the swig target is the autogenerated _PySelfintersect
# instead of PySelfintersect.
ADD_CUSTOM_TARGET(windingnumber DEPENDS exe_windingnumber lib_windingnumber
    _PyWindingNumber)
