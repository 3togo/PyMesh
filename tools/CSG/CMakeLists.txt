# Include this directory
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# Enumerate source files
FILE(GLOB SRC_FILES *.cpp *.inl)
FILE(GLOB INC_FILES *.h)

SET(DEPENDENT_LIBS "")

# Cork
IF (CORK_FOUND AND GMP_FOUND)
    INCLUDE_DIRECTORIES(${CORK_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${GMP_INCLUDE_DIRS})
    LIST(APPEND DEPENDENT_LIBS ${CORK_LIBRARIES})
    LIST(APPEND DEPENDENT_LIBS ${GMP_LIBRARIES})
    ADD_DEFINITIONS(-DWITH_CORK)
    ADD_SUBDIRECTORY(Cork)
ELSEIF (NOT CORK_FOUND)
    MESSAGE(WARNING "Cork is missing.  Cork CSG support is skipped")
ELSEIF (NOT GMP_FOUND)
    MESSAGE(WARNING "GMP is missing.  Cork CSG support is skipped")
ENDIF (CORK_FOUND AND GMP_FOUND)

# Clipper
IF (CLIPPER_FOUND)
    INCLUDE_DIRECTORIES(${CLIPPER_INCLUDE_DIRS})
    LIST(APPEND DEPENDENT_LIBS ${CLIPPER_LIBRARIES})
    ADD_DEFINITIONS(-DWITH_CLIPPER)
    ADD_SUBDIRECTORY(Clipper)
ELSE(CLIPPER_FOUND)
    MESSAGE(WARNING "Clipper is missing. Clipper CSG support is skipped")
ENDIF(CLIPPER_FOUND)

## IGL and CGAL
#IF (LIBIGL_FOUND AND CGAL_FOUND)
#    INCLUDE_DIRECTORIES(${LIBIGL_INCLUDE_DIRS})
#    SET(BACKUP_CXX_FLAGS ${CMAKE_CXX_FLAGS})
#    INCLUDE(${CGAL_USE_FILE})
#    SET(CMAKE_CXX_FLAGS ${BACKUP_CXX_FLAGS})
#    ADD_DEFINITIONS(-DWITH_IGL)
#    LIST(APPEND DEPENDENT_LIBS ${CGAL_LIBRARIES})
#    ADD_SUBDIRECTORY(IGL)
#ELSEIF(NOT LIBIGL_FOUND)
#    MESSAGE(WARNING "libigl is missing, libigl CSG support is skipped")
#ELSEIF(NOT CGAL_FOUND)
#    MESSAGE(WARNING "CGAL is missing, libigl CSG support is skipped")
#ENDIF (LIBIGL_FOUND AND CGAL_FOUND)

ADD_LIBRARY(lib_csg SHARED ${SRC_FILES} ${INC_FILES})
SET_TARGET_PROPERTIES(lib_csg PROPERTIES OUTPUT_NAME "csg")
TARGET_LINK_LIBRARIES(lib_csg Mesh lib_MeshUtils lib_triangle_wrapper ${DEPENDENT_LIBS})

set(SWG_FILES PyCSG.i)

# Generate wrapper for python
SET_SOURCE_FILES_PROPERTIES(${SWG_FILES} PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(${SWG_FILES} PROPERTIES CMAKE_SWIG_FLAGS "-includeall")
SWIG_ADD_MODULE(PyCSG python ${SWG_FILES} ${INC_FILES})
SWIG_LINK_LIBRARIES(PyCSG ${PYTHON_LIBRARIES} Mesh lib_MeshUtils lib_csg
    ${DEPENDENT_LIBS})

# Boudle lib, swig wrapper into a single target.
# Usage: make csg
ADD_CUSTOM_TARGET(csg DEPENDS lib_csg _PyCSG)
